"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _util = require("@polkadot/util");

var _blake = require("../blake2");

var _asU8a = _interopRequireDefault(require("../random/asU8a"));

var _fromSeed = _interopRequireDefault(require("./keypair/fromSeed"));

var _sign = _interopRequireDefault(require("./sign"));

var _verify = _interopRequireDefault(require("./verify"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const MESSAGE = (0, _util.stringToU8a)('this is a message');
describe('sign and verify', () => {
  it('verify message signature', () => {
    const address = '0x59f587c045d4d4e9aa1016eae43770fc0551df8a385027723342753a876aeef0';
    const sig = '0x92fcacf0946bbd10b31dfe16d567ed1d3014e81007dd9e5256e19c0f07eacc1643b151ca29e449a765e16a7ce59b88d800467d6b3412d30ea8ad22307a59664b00';
    const msg = (0, _util.stringToU8a)('secp256k1');
    expect((0, _verify.default)(msg, sig, address)).toBe(true);
  });
  it('has 65-byte signatures', () => {
    const pair = (0, _fromSeed.default)((0, _asU8a.default)());
    expect((0, _sign.default)(MESSAGE, pair)).toHaveLength(65);
  });
  it('can sign and verify a message by random key', () => {
    const pair = (0, _fromSeed.default)((0, _asU8a.default)());
    const signature = (0, _sign.default)(MESSAGE, pair);
    const address = (0, _blake.blake2AsU8a)(pair.publicKey, 256);
    expect((0, _verify.default)(MESSAGE, signature, address)).toBe(true);
  });
});