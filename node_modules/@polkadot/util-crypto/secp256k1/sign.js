"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = secp256k1Sign;

var _util = require("@polkadot/util");

var _blake = require("../blake2");

var _elliptic = _interopRequireDefault(require("elliptic"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const EC = _elliptic.default.ec;
const ec = new EC('secp256k1');
/**
 * @name secp256k1Sign
 * @description Returns message signature of `message`, using the supplied pair
 */

function secp256k1Sign(message, {
  secretKey
}) {
  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');
  const messageHash = (0, _blake.blake2AsU8a)((0, _util.u8aToU8a)(message), 256);
  const key = ec.keyFromPrivate(secretKey);
  const ecsig = key.sign(messageHash);
  const rParam = new Uint8Array(ecsig.r.toArray());
  const sParam = new Uint8Array(ecsig.s.toArray());
  const recoveryParam = Uint8Array.of(ecsig.recoveryParam || 0);
  return (0, _util.u8aConcat)(rParam, sParam, recoveryParam);
}