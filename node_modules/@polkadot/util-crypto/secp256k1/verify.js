"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = secp256k1Verify;

var _util = require("@polkadot/util");

var _blake = require("../blake2");

var _elliptic = _interopRequireDefault(require("elliptic"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
const EC = _elliptic.default.ec;
const ec = new EC('secp256k1');
/**
 * @name secp256k1Verify
 * @description Verifies the signature of `message`, using the supplied pair
 */

function secp256k1Verify(message, signature, address) {
  const signatureU8a = (0, _util.u8aToU8a)(signature);
  const sig = {
    r: signatureU8a.slice(0, 32),
    s: signatureU8a.slice(32, 64)
  };
  const recovery = signatureU8a[64];
  const publicKey = new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
  ec.recoverPubKey((0, _blake.blake2AsU8a)(message, 256), sig, recovery).encodeCompressed(null));
  return Buffer.compare((0, _blake.blake2AsU8a)(publicKey, 256), (0, _util.u8aToU8a)(address)) === 0;
}