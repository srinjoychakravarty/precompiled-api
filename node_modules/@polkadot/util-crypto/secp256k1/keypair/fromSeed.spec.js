"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _util = require("@polkadot/util");

var _mnemonic = require("../../mnemonic");

var _ = require("..");

var _testing = _interopRequireDefault(require("./testing"));

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.
describe('secp256k1KeypairFromSeed', () => {
  const TEST = (0, _util.hexToU8a)('0x4380de832af797688026ce24f85204d508243f201650c1a134929e5458b7fbae');
  const RESULT = {
    publicKey: (0, _util.hexToU8a)('0x03fd8c74f795ced92064b86191cb2772b1e3a0947740aa0a5a6e379592471fd85b'),
    secretKey: (0, _util.hexToU8a)('0x4380de832af797688026ce24f85204d508243f201650c1a134929e5458b7fbae')
  };
  it('generates a valid publicKey/secretKey pair (u8a)', () => {
    expect((0, _.secp256k1KeypairFromSeed)(TEST)).toEqual(RESULT);
  });

  _testing.default.forEach(([mnemonic, secretKey, publicKey], index) => {
    it(`creates valid against known (${index})`, () => {
      const seed = (0, _mnemonic.mnemonicToMiniSecret)(mnemonic);
      const pair = (0, _.secp256k1KeypairFromSeed)(seed);
      expect((0, _util.u8aToHex)(pair.secretKey)).toEqual(secretKey);
      expect((0, _util.u8aToHex)(pair.publicKey)).toEqual(publicKey);
    });
  });
});