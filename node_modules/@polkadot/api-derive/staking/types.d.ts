import type BN from 'bn.js';
import { AccountId, Balance, EraIndex, Exposure, Keys, RewardDestination, RewardPoint, StakingLedger, ValidatorPrefs } from '@polkadot/types/interfaces';
import { DeriveSessionIndexes } from '../session/types';
export declare type DeriveEraValPoints = Record<string, RewardPoint>;
export declare type DeriveEraValPrefs = Record<string, ValidatorPrefs>;
export declare type DeriveEraValSlash = Record<string, Balance>;
export interface DeriveEraPoints {
    era: EraIndex;
    eraPoints: RewardPoint;
    validators: DeriveEraValPoints;
}
export interface DeriveEraPrefs {
    era: EraIndex;
    validators: DeriveEraValPrefs;
}
export interface DeriveEraRewards {
    era: EraIndex;
    eraReward: Balance;
}
export interface DeriveEraSlashes {
    era: EraIndex;
    nominators: DeriveEraValSlash;
    validators: DeriveEraValSlash;
}
export interface DeriveStakerPoints {
    era: EraIndex;
    eraPoints: RewardPoint;
    points: RewardPoint;
}
export declare type DeriveEraNominatorExposure = Record<string, DeriveEraExposureNominating[]>;
export declare type DeriveEraValidatorExposure = Record<string, Exposure>;
export interface DeriveEraExposure {
    era: EraIndex;
    nominators: DeriveEraNominatorExposure;
    validators: DeriveEraValidatorExposure;
}
export interface DeriveOwnExposure {
    clipped: Exposure;
    era: EraIndex;
    exposure: Exposure;
}
export declare type DeriveOwnSlashes = DeriveStakerSlashes;
export interface DeriveEraExposureNominating {
    validatorId: string;
    validatorIndex: number;
}
export interface DeriveStakerExposure {
    era: EraIndex;
    isEmpty: boolean;
    isValidator: boolean;
    nominating: DeriveEraExposureNominating[];
    validators: DeriveEraValidatorExposure;
}
export interface DeriveStakerRewardValidator {
    total: Balance;
    value: Balance;
}
export interface DeriveStakerReward {
    era: EraIndex;
    eraReward: Balance;
    isStakerPayout?: boolean;
    isEmpty: boolean;
    isValidator: boolean;
    nominating: DeriveEraExposureNominating[];
    validators: Record<string, DeriveStakerRewardValidator>;
}
export interface DeriveStakerSlashes {
    era: EraIndex;
    total: Balance;
}
export interface DeriveStakingElected {
    nextElected: AccountId[];
    info: DeriveStakingQuery[];
}
export interface DeriveStakingWaiting {
    info: DeriveStakingQuery[];
    waiting: AccountId[];
}
export interface DeriveStakingValidators {
    nextElected: AccountId[];
    validators: AccountId[];
}
export interface DeriveStakingStash {
    controllerId?: AccountId;
    exposure?: Exposure;
    nominators?: AccountId[];
    nominateAt?: EraIndex;
    rewardDestination?: RewardDestination;
    nextKeys?: Keys;
    stashId?: AccountId;
    validatorPrefs?: ValidatorPrefs;
}
export interface DeriveStakingQuery extends DeriveStakingStash {
    accountId: AccountId;
    nextSessionIds: AccountId[];
    sessionIds: AccountId[];
    stakingLedger?: StakingLedger;
}
export interface DeriveStakingAccount extends DeriveStakingQuery {
    redeemable?: Balance;
    unlocking?: DeriveUnlocking[];
}
export interface DeriveStakingOverview extends DeriveSessionIndexes {
    nextElected: AccountId[];
    validators: AccountId[];
}
export declare type DeriveUnlocking = {
    remainingEras: BN;
    value: Balance;
};
